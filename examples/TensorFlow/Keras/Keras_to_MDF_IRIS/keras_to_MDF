digraph Sequential_graph {
	node [color="#444444" fillcolor="#ffffff" fontcolor=black penwidth=1 shape=box style="rounded,filled"]
	Input [label=<<table border="0" cellborder="0"><tr><td colspan="2"><b>Input</b></td></tr><tr><td><font color="#1666ff">Input_in</font> = [[ 0.14443512 ... -0.07943674] ... [-1.42027864 ... -1.33370109]] (NP (30, 4) float64)</td></tr><tr><td><font color="#cc3355">Input_out</font> = <font color="#1666ff">Input_in</font> </td></tr></table>>]
	node [color="#444444" fillcolor="#ffffff" fontcolor=black penwidth=1 shape=box style="rounded,filled"]
	First_layer [label=<<table border="0" cellborder="0"><tr><td colspan="2"><b>First_layer</b></td></tr><tr><td><font color="#188855">First_layer_in</font> </td></tr><tr><td><font color="#1666ff">wgts</font> = [[-0.3618062  ...  0.397131  ] ... [ 0.05185791 ...  0.22908908]] (NP (4, 32) float32)</td></tr><tr><td><font color="#1666ff">bias</font> = [ 0.00608886 ... -0.00280216] (NP (32,) float32)</td></tr><tr><td><font color="#1666ff">linear</font> = (<font color="#188855">First_layer_in</font> @ <font color="#1666ff">wgts</font>) + <font color="#1666ff">bias</font></td></tr><tr><td><font color="#1666ff">Output</font> = <font color="#1666ff">linear</font>*(linear&gt;0)</td></tr><tr><td><font color="#cc3355">First_layer_out</font> = <font color="#1666ff">Output</font> </td></tr></table>>]
	node [color="#444444" fillcolor="#ffffff" fontcolor=black penwidth=1 shape=box style="rounded,filled"]
	Second_layer [label=<<table border="0" cellborder="0"><tr><td colspan="2"><b>Second_layer</b></td></tr><tr><td><font color="#188855">Second_layer_in</font> </td></tr><tr><td><font color="#1666ff">wgts</font> = [[-0.01069917 ...  0.00278666] ... [-0.14248785 ...  0.12133926]] (NP (32, 64) float32)</td></tr><tr><td><font color="#1666ff">bias</font> = [-0.00728454 ...  0.01116762] (NP (64,) float32)</td></tr><tr><td><font color="#1666ff">linear</font> = (<font color="#188855">Second_layer_in</font> @ <font color="#1666ff">wgts</font>) + <font color="#1666ff">bias</font></td></tr><tr><td><font color="#1666ff">Output</font> = <font color="#1666ff">linear</font>*(linear&gt;0)</td></tr><tr><td><font color="#cc3355">Second_layer_out</font> = <font color="#1666ff">Output</font> </td></tr></table>>]
	node [color="#444444" fillcolor="#ffffff" fontcolor=black penwidth=1 shape=box style="rounded,filled"]
	Third_layer [label=<<table border="0" cellborder="0"><tr><td colspan="2"><b>Third_layer</b></td></tr><tr><td><font color="#188855">Third_layer_in</font> </td></tr><tr><td><font color="#1666ff">wgts</font> = [[ 0.21627618 ...  0.15577862] ... [-0.08379256 ... -0.05158306]] (NP (64, 64) float32)</td></tr><tr><td><font color="#1666ff">bias</font> = [ 0.00090039 ... -0.00847603] (NP (64,) float32)</td></tr><tr><td><font color="#1666ff">linear</font> = (<font color="#188855">Third_layer_in</font> @ <font color="#1666ff">wgts</font>) + <font color="#1666ff">bias</font></td></tr><tr><td><font color="#1666ff">Output</font> = <font color="#1666ff">linear</font>*(linear&gt;0)</td></tr><tr><td><font color="#cc3355">Third_layer_out</font> = <font color="#1666ff">Output</font> </td></tr></table>>]
	node [color="#444444" fillcolor="#ffffff" fontcolor=black penwidth=1 shape=box style="rounded,filled"]
	Fourth_layer [label=<<table border="0" cellborder="0"><tr><td colspan="2"><b>Fourth_layer</b></td></tr><tr><td><font color="#188855">Fourth_layer_in</font> </td></tr><tr><td><font color="#1666ff">wgts</font> = [[ 0.07395836 ...  0.12052273] ... [-0.08207593 ...  0.02751157]] (NP (64, 3) float32)</td></tr><tr><td><font color="#1666ff">bias</font> = [ 0.00441413  0.00690141 -0.00832103] (NP (3,) float32)</td></tr><tr><td><font color="#1666ff">linear</font> = (<font color="#188855">Fourth_layer_in</font> @ <font color="#1666ff">wgts</font>) + <font color="#1666ff">bias</font></td></tr><tr><td><font color="#441199">exp</font> = <i>exponential</i>(<font color="#1666ff">linear</font>-sum(<font color="#1666ff">linear</font>), 1, 1, 0, 0)</td></tr><tr><td colspan="2"><i>exponential(variable0, scale, rate, bias, offset) = scale * exp((rate * variable0) + bias) + offset</i></td></tr><tr><td><font color="#441199">exp_sum</font> = <i>sum(exp)</i> ( - no args -)</td></tr><tr><td><font color="#441199">Output</font> = <i>exp / exp_sum</i> ( - no args -)</td></tr><tr><td><font color="#cc3355">Fourth_layer_out</font> = <font color="#441199">Output</font> </td></tr></table>>]
	Input -> First_layer [label=<edge_Input_First_layer (<font color="#cc3355">Input_out</font> -&gt; <font color="#188855">First_layer_in</font>)> arrowhead=empty]
	First_layer -> Second_layer [label=<edge_First_layer_Second_layer (<font color="#cc3355">First_layer_out</font> -&gt; <font color="#188855">Second_layer_in</font>)> arrowhead=empty]
	Second_layer -> Third_layer [label=<edge_Second_layer_Third_layer (<font color="#cc3355">Second_layer_out</font> -&gt; <font color="#188855">Third_layer_in</font>)> arrowhead=empty]
	Third_layer -> Fourth_layer [label=<edge_Third_layer_Fourth_layer (<font color="#cc3355">Third_layer_out</font> -&gt; <font color="#188855">Fourth_layer_in</font>)> arrowhead=empty]
}
